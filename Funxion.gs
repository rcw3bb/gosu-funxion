uses java.util.function.Consumer
uses java.util.function.Supplier
uses java.util.function.Function

/**
 * A utility class for executing functional interfaces.
 *
 * @author Ron Webb
 * @since 2019-06-07
 */
class Funxion {

  private construct() {}

  /**
   * The builder for Consumer interface.
   *
   * @param <TYPE_DATA> The type data to be accepted by the Consumer implementation.
   *
   * @author Ron Webb
   */
  public static class ExecutorBuilder<TYPE_DATA> {

    private var _logic : Consumer<TYPE_DATA>

    public construct(logic: Consumer<TYPE_DATA>) {
      _logic = logic
    }

    public function execute(data : TYPE_DATA) {
      _logic.accept(data)
    }

    public function execute() {
      _logic.accept(null)
    }
  }

  /**
   * The builder for Supplier interface.
   *
   * @param <TYPE_DATA> The type data to be generated by the Supplier implementation.
   *
   * @author Ron Webb
   */
  public static class GeneratorBuilder<TYPE_DATA> {

    private var _logic : Supplier<TYPE_DATA>

    public construct(logic : Supplier<TYPE_DATA>) {
      _logic = logic
    }

    public function generate() : TYPE_DATA {
      return _logic.get()
    }
  }

  /**
   * The builder for Function interface.
   *
   * @param <TYPE_INPUT> The type data to be accepted by the Function implementation.
   * @param <TYPE_OUTPUT> The type data to be returned by the Function implementation.
   *
   * @author Ron Webb
   */
  public static class ProcessorBuilder<TYPE_INPUT, TYPE_OUTPUT> {

    private var _logic : Function<TYPE_INPUT, TYPE_OUTPUT>

    public construct(logic : Function<TYPE_INPUT, TYPE_OUTPUT>) {
      _logic = logic
    }

    public function process(data : TYPE_INPUT) : TYPE_OUTPUT {
      return _logic.apply(data)
    }
  }

  /**
   * Returns the builder for Consumer
   *
   * @param logic The Consumer implementation.
   * @param <TYPE_DATA> The type of data the consumer will process.
   * @return The instance of the ExecutorBuilder.
   *
   * @author Ron Webb
   */
  public static function buildExecutor<TYPE_DATA>(logic : Consumer<TYPE_DATA>) : ExecutorBuilder<TYPE_DATA> {
    return new ExecutorBuilder<TYPE_DATA>(logic)
  }

  /**
   * Returns the builder for Supplier
   *
   * @param logic The Supplier implementation.
   * @param <TYPE_DATA> The type of data the supplier will provide.
   * @return The instance of the GeneratorBuilder.
   *
   * @author Ron Webb
   */
  public static function buildGenerator<TYPE_DATA>(logic : Supplier<TYPE_DATA>) : GeneratorBuilder<TYPE_DATA> {
    return new GeneratorBuilder<TYPE_DATA>(logic)
  }

  /**
   * Returns the builder for Function
   *
   * @param logic The Function implementation.
   * @param <TYPE_INPUT> The type of data the function will accept.
   * @param <TYPE_OUTPUT> The type of data the function will return.
   * @return The instance of the ProcessorBuilder.
   *
   * @author Ron Webb
   */
  public static function buildProcessor<TYPE_INPUT, TYPE_OUTPUT>(logic : Function<TYPE_INPUT, TYPE_OUTPUT>) : ProcessorBuilder<TYPE_INPUT, TYPE_OUTPUT> {
    return new ProcessorBuilder<TYPE_INPUT, TYPE_OUTPUT>(logic)
  }

}